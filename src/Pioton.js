// Generated by CoffeeScript 1.10.0
(function() {
  var Ioton, IotonP;

  Ioton = require('./Ioton');

  module.exports = IotonP = (function() {
    function IotonP(encoding, objectEncoding) {
      if (encoding == null) {
        encoding = "ascii";
      }
      if (objectEncoding == null) {
        objectEncoding = null;
      }
      this.encoding = encoding;
      if (objectEncoding) {
        this.objectEncoding = objectEncoding;
      } else {
        this.objectEncoding = new Ioton();
      }
      this.endMessageCharacter = '\x17';
      this.beginPacketCharacter = '\x14';
      this.ackCharacter = '\x06';
      this.nackCharacter = '\x15';
      this.sequenceCharacter = '\x16';
      this.cancelCharacter = '\x18';
      this.resetCharacter = '\x10';
      this.inquiryCharacter = '\x05';
      this.answerCharacter = '\x12';
      this.stringBeginCharacter = '\x0F';
      this.endMessageHextet = 0x17;
      this.beginPacketHextet = 0x14;
      this.ackHextet = 0x06;
      this.nackHextet = 0x15;
      this.sequenceHextet = 0x16;
      this.cancelHextet = 0x18;
      this.resetHextet = 0x10;
      this.inquiryHextet = 0x05;
      this.answerHextet = 0x12;
      this.stringBeginHextet = 0x0F;
    }

    IotonP.prototype.schema = function(schema) {
      return this.objectEncoding.schema(schema);
    };

    IotonP.prototype.parse = function(packet) {
      var message;
      switch (packet[0]) {
        case this.beginPacketHextet:
          message = this.parsePacket(packet);
          break;
        case this.inquiryHextet:
          message = this.parseInquiry(packet);
          break;
        case this.answerHextet:
          message = this.parseAnswer(packet);
          break;
        case this.ackHextet:
          message = this.parseAck(packet);
          break;
        case this.nackHextet:
          message = this.parseNack(packet);
          break;
        case this.cancelHextet:
          message = this.parseCancel(packet);
          break;
        case this.resetHextet:
          message = this.parseReset(packet);
      }
      return message;
    };

    IotonP.prototype.parsePacket = function(packet) {
      var message, sequence, tag, tokens;
      tokens = packet.toString().split(this.stringBeginCharacter);
      message = tokens[1].substring(0, tokens[1].length - 1);
      tokens = tokens[0].split(this.sequenceCharacter);
      if (tokens.length > 1) {
        sequence = tokens[1];
      } else {
        sequence = '';
      }
      tag = tokens[0].substring(1, tokens[0].length);
      return {
        id: tag,
        sequence: sequence,
        message: message
      };
    };

    IotonP.prototype.packet = function(packet, id, sequenceNumber) {
      var message;
      if (id == null) {
        id = null;
      }
      if (sequenceNumber == null) {
        sequenceNumber = null;
      }
      if (packet == null) {
        throw "Error: Can't pack null or undefined packet!";
      }
      if ((id != null) && (sequenceNumber != null)) {
        message = this.beginPacketCharacter + id + this.sequenceCharacter + sequenceNumber;
      } else if ((id != null)) {
        message = this.beginPacketCharacter + id;
      } else if ((sequenceNumber != null)) {
        message = this.beginPacketCharacter + this.sequenceCharacter + sequenceNumber;
      } else {
        message = this.beginPacketCharacter;
      }
      if (this.objectEncoding instanceof Ioton) {
        message += this.objectEncoding.stringify(packet) + this.endMessageCharacter;
      } else if (this.objectEncoding instanceof Bioton) {
        message += this.objectEncoding.encode(packet) + this.endMessageCharacter;
      }
      message = new Buffer(message, this.encoding);
      return message;
    };

    IotonP.prototype.parseInquiry = function(packet) {
      var request;
      if (packet.length === 2 && (packet[0] = this.inquiryHextet && (packet[1] = this.endMessageHextet))) {
        return {
          inquiry: '"schema"'
        };
      }
      request = packet.toString();
      return {
        inquiry: request.substring(1, request.length - 1)
      };
    };

    IotonP.prototype.inquiry = function(messageJSON) {
      var message;
      if (messageJSON == null) {
        messageJSON = null;
      }
      if ((messageJSON == null) || messageJSON === '"schema"') {
        message = new Buffer("  ", this.encoding);
        message[0] = this.inquiryHextet;
        message[1] = this.endMessageHextet;
        return message;
      } else {
        message = this.inquiryCharacter + messageJSON;
      }
      message = new Buffer(message + " ", this.encoding);
      message[message.length - 1] = this.endMessageHextet;
      return message;
    };

    IotonP.prototype.parseAnswer = function(packet) {
      var answer;
      answer = packet.toString();
      return {
        answer: answer.substring(1, answer.length - 1)
      };
    };

    IotonP.prototype.answer = function(messageJSON) {
      var message;
      if (messageJSON == null) {
        messageJSON = null;
      }
      if (messageJSON == null) {
        throw "No answer message given.";
      }
      message = this.answerCharacter + messageJSON;
      message = new Buffer(message + " ", this.encoding);
      message[message.length - 1] = this.endMessageHextet;
      return message;
    };

    IotonP.prototype.parseAck = function(packet) {
      var ack, loc;
      ack = packet.toString();
      if (packet.length === 1) {
        return {
          ack: "ack"
        };
      } else if (packet[1] === this.sequenceHextet) {
        return {
          ack: {
            id: ack.substring(2, ack.length - 1)
          }
        };
      }
      loc = ack.indexOf(this.sequenceCharacter);
      if (loc === -1) {
        return {
          ack: {
            sequence: ack.substring(1, ack.length - 1)
          }
        };
      } else {
        return {
          ack: {
            id: ack.substring(loc + 1, ack.length - 1),
            sequence: ack.substring(1, loc)
          }
        };
      }
    };

    IotonP.prototype.ack = function(id, sequenceNumber) {
      var message;
      if (id == null) {
        id = null;
      }
      if (sequenceNumber == null) {
        sequenceNumber = null;
      }
      if ((id != null) && (sequenceNumber != null)) {
        message = this.ackCharacter + sequenceNumber + this.sequenceCharacter + id + this.endMessageCharacter;
      } else if ((sequenceNumber != null)) {
        message = this.ackCharacter + sequenceNumber + this.endMessageCharacter;
      } else if ((id != null)) {
        message = this.ackCharacter + this.sequenceCharacter + id + this.endMessageCharacter;
      } else {
        message = this.ackCharacter;
      }
      message = new Buffer(message, this.encoding);
      return message;
    };

    IotonP.prototype.parseNack = function(packet) {
      return {
        nack: "nack"
      };
    };

    IotonP.prototype.nack = function() {
      return new Buffer(this.nackCharacter, this.encoding);
    };

    IotonP.prototype.parseCancel = function(packet) {
      return {
        cancel: "cancel"
      };
    };

    IotonP.prototype.cancel = function() {
      return new Buffer(this.cancelCharacter, this.encoding);
    };

    IotonP.prototype.parseReset = function(packet) {
      return {
        reset: "reset"
      };
    };

    IotonP.prototype.reset = function() {
      return new Buffer(this.resetCharacter, this.encoding);
    };

    return IotonP;

  })();

}).call(this);

//# sourceMappingURL=Pioton.js.map
