// Generated by CoffeeScript 1.10.0
(function() {
  var Data,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = Data = (function() {
    function Data(capacity) {
      this._alloc = bind(this._alloc, this);
      this._buffer = new Buffer(capacity || 128);
      this._length = 0;
    }

    Data.prototype._alloc = function(bytes) {
      var buffLen, newBuffer;
      buffLen = this._buffer.length;
      if (this._length + bytes > buffLen) {
        while (true) {
          buffLen *= 2;
          if (!(this._length + bytes > buffLen)) {
            break;
          }
        }
        newBuffer = new Buffer(buffLen);
        this._buffer.copy(newBuffer, 0, 0, this._length);
        return this._buffer = newBuffer;
      }
    };

    Data.prototype.appendBuffer = function(data) {
      this._alloc(data.length);
      data.copy(this._buffer, this._length);
      return this._length += data.length;
    };

    Data.prototype.writeUInt8 = function(value) {
      this._alloc(1);
      this._buffer.writeUInt8(value, this._length);
      return this._length++;
    };

    Data.prototype.writeUInt16 = function(value) {
      this._alloc(2);
      this._buffer.writeUInt16BE(value, this._length);
      return this._length += 2;
    };

    Data.prototype.writeUInt32 = function(value) {
      this._alloc(4);
      this._buffer.writeUInt32BE(value, this._length);
      return this._length += 4;
    };

    Data.prototype.writeDouble = function(value) {
      this._alloc(8);
      this._buffer.writeDoubleBE(value, this._length);
      return this._length += 8;
    };

    Data.prototype.toBuffer = function() {
      return this._buffer.slice(0, this._length);
    };

    return Data;

  })();

}).call(this);

//# sourceMappingURL=Data.js.map
