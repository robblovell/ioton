// Generated by CoffeeScript 1.8.0
(function() {
  var objectifyStr;

  objectifyStr = function(text) {
    var end, findEnd, i, index, indexStack, j, na, objects, pop, push, set, setArray, setObject, stack, start, token, tokens, type, _i, _len, _ref, _ref1, _ref2, _ref3;
    stack = new Stack();
    indexStack = new Stack();
    push = function(value, type, index) {
      if (index == null) {
        index = null;
      }
      stack.push([value, type]);
      if ((index != null)) {
        return indexStack.push(index);
      }
    };
    pop = function() {
      var na, value, _ref;
      _ref = stack.pop(), value = _ref[0], na = _ref[1], na = _ref[2];
      indexStack.pop();
      return value;
    };
    setObject = function(value) {
      var index, na, schema, _ref;
      index = indexStack.pop();
      _ref = stack.peek(), na = _ref[0], na = _ref[1], schema = _ref[2];
      stack.peek()[0][index++] = value;
      return indexStack.push(index);
    };
    setArray = function(value) {
      return stack.peek()[0].push(value);
    };
    set = function(value) {
      var na, type, _ref;
      if (!stack.isEmpty()) {
        _ref = stack.peek(), na = _ref[0], type = _ref[1];
        if (type === "object") {
          return setObject(value);
        } else {
          return setArray(value);
        }
      }
    };
    findEnd = function(token, i) {
      var j;
      j = i;
      while (i < token.length && token[i] !== '}' && token[i] !== ']') {
        i++;
      }
      return [j, i - 1, i];
    };
    objects = null;
    tokens = text.split(',');
    j = 0;
    index = 0;
    for (_i = 0, _len = tokens.length; _i < _len; _i++) {
      token = tokens[_i];
      i = 0;
      while (i < token.length) {
        if (token[i] === '{') {
          push({}, "object", 0);
          i++;
        } else if (token[i] === '}') {
          objects = pop();
          set(objects);
          i++;
        } else if (token[i] === '[') {
          push([], "array");
          i++;
        } else if (token[i] === ']') {
          _ref = stack.pop(), objects = _ref[0], na = _ref[1];
          set(objects);
          i++;
        } else {
          _ref1 = stack.peek(), na = _ref1[0], type = _ref1[1];
          if (type === "object") {
            _ref2 = findEnd(token, i), start = _ref2[0], end = _ref2[1], i = _ref2[2];
            setObject(token.slice(start, +end + 1 || 9e9));
          } else {
            _ref3 = findEnd(token, i), start = _ref3[0], end = _ref3[1], i = _ref3[2];
            setArray(token.slice(start, +end + 1 || 9e9));
          }
        }
      }
    }
    return objects;
  };

}).call(this);

//# sourceMappingURL=objectifyStr.js.map
