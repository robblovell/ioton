// Generated by CoffeeScript 1.8.0
(function() {
  var Type, assert, ioton, should;

  should = require('should');

  assert = require('assert');

  ioton = require('../src/ioton');

  Type = require('../src/binary/Type');

  describe('IOTONB Type', function() {
    var myType;
    myType = null;
    it('should correctly parse a type', function() {
      myType = new Type({
        a: 'int',
        b: ['int'],
        c: [
          {
            'd?': 'string'
          }
        ]
      });
      return assert.deepEqual(myType, {
        __proto__: Type.prototype,
        type: Type.TYPE.OBJECT,
        fields: [
          {
            name: 'a',
            optional: false,
            array: false,
            type: {
              type: Type.TYPE.INT
            }
          }, {
            name: 'b',
            optional: false,
            array: true,
            type: {
              type: Type.TYPE.INT
            }
          }, {
            name: 'c',
            optional: false,
            array: true,
            type: {
              type: Type.TYPE.OBJECT,
              fields: [
                {
                  name: 'd',
                  optional: true,
                  array: false,
                  type: {
                    type: Type.TYPE.STRING
                  }
                }
              ]
            }
          }
        ]
      });
    });
    return it('should encode-decode a conforming object', function() {
      var IOTON, encoded, i, json, object, testResult, _i, _ref;
      IOTON = new ioton();
      myType = new Type({
        a: 'int',
        b: ['int'],
        c: [
          {
            'd?': 'string'
          }
        ]
      });
      object = {
        a: 22,
        b: [-3, 14, -15, 92, -65, 35],
        c: [
          {
            d: 'Hello World'
          }, {
            d: '?'
          }
        ]
      };
      encoded = myType.encode(object);
      testResult = [22, 6, 125, 14, 113, 128, 92, 191, 191, 35, 2, 1, 11, 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 1, 1, 63];
      for (i = _i = 0, _ref = encoded.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        encoded[i].should.be.equal(testResult[i]);
      }
      ioton = IOTON.stringify(object);
      json = JSON.stringify(object);
      console.log("js-binary size-> " + (100 * encoded.length / json.length).toPrecision(2) + "% " + "ioton size-> " + (100 * ioton.length / json.length).toPrecision(2) + "% " + "json length:" + json.length + " vs " + "js-binary length:" + encoded.length + " vs " + "ioton length:" + ioton.length + "\n");
      return myType.decode(encoded).should.be.eql({
        a: 22,
        b: [-3, 14, -15, 92, -65, 35],
        c: [
          {
            d: 'Hello World'
          }, {
            d: '?'
          }
        ]
      });
    });
  });

}).call(this);

//# sourceMappingURL=ioton-binary_test.js.map
